PROBLEM = CPHS-agricultural-EvoChecker-output
    
    MODEL_TEMPLATE_FILE = /home/gnvf500/Gricel-Documents/GithubGris/EfficientPlanAdaptation/src/Problems/Agricultural/data_agricultural/datamodelEvo.pm
    PROPERTIES_FILE = /home/gnvf500/Gricel-Documents/GithubGris/EfficientPlanAdaptation/src/Problems/Agricultural/data_agricultural/datamodelEvo.props

    # Step2 : Set the algorithm (MOGA or Random) to run
    # ALGORITHM = RANDOM
    ALGORITHM = NSGAII
    # ALGORITHM = SPEA2
    # ALGORITHM = MOCELL

    # Step 3: Set the population for the MOGAs
    POPULATION_SIZE = 10

    # Step 4: Set the maximum number of evaluations
    MAX_EVALUATIONS = 100

    # Step 5: Set the number of processors (for parallel execution) and initial port
    PROCESSORS = 1
    INIT_PORT = 8860

    # Step 6: Set the directories containing the libraries of the model checker
    MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = /home/gnvf500/Gricel-Documents/GithubGris/EfficientPlanAdaptation/src/apps/EvoChecker/libs
    # MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = libs/runtime-amd64

    # Step 7: Set plotting settings
    # Note: requires Python3
    PLOT_PARETO_FRONT = FALSE
    PYTHON3_DIRECTORY = /usr/bin/python3
    # /usr/local/bin/python3

    # Step 8: Set additional settings
    VERBOSE = TRUE

    # Which EvoChecker engine should be used: Options: NORMAL, PARAMETRIC
    # If is absent the normal EvoChecker will be used
    EVOCHECKER_TYPE = NORMAL

    # Option: PRISM | STORM (preference: PRISM for NORMAL, STORM for PARAMETRIC)
    EVOCHECKER_ENGINE = PRISM
    # EVOCHECKER_TYPE = PARAMETRIC
    # EVOCHECKER_ENGINE = STORM

    #############################################################
    # Advanced Settings
    # JAVA=/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home/bin/java
    # MODEL_CHECKING_ENGINE = libs/PrismExecutor.jar
    